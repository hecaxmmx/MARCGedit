#!/usr/bin/perl
package MARCGedit::MARCMnemonics;

#
# MARCGedit::MARCMnemonics.pm
# This file is part of MARCGedit
#
# Copyright (C) 2017 - Hector Castro <hector.hecaxmmx@gmail.com>
#
# MARCGedit is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# MARCGedit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with MARCGedit. If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

BEGIN {
    require Exporter;
    our $VERSION = '1.00';
    our @ISA     = qw(Exporter);
    our @EXPORT =
      qw(mnemonics_to_utf8 utf8_to_mnemonics BadMnemonics_to_RightMnemonics BadMnemonics_to_RightUTF8);
}

use utf8;
use MARCGedit::Mnemonic::Mnemonics qw(mnemonics_to_character);
use MARCGedit::Mnemonic::Characters qw(character_to_mnemonics);
use MARCGedit::Mnemonic::BadMnemonics qw(bad_to_right);
use MARCGedit::Mnemonic::BadMnemonicsToChar qw(bad_to_char);

=head1 NAME

MARCGedit::MARCMnemonics - Three methods to help in conversion between mnemonics and characters in UTF-8

=head1 SYNOPSIS

    # Convert mnemonics to utf8
    mnemonics_to_utf8( $mrk_record );

    # Convert utf8 to mnemonics
    utf8_to_mnemonics( $string_or_record );

    # Convert bad mnemonics generated by MARC::File::MARCMaker in UTF-8 files to the proper ones
    BadMnemonics_to_RightMnemonics($mrk_record)

    # Convert bad mnemonics generated by MARC::File::MARCMaker in UTF-8 to right charset.
    BadMnemonics_to_RightUTF8($mrk_record);

=cut

# Method to help in conversion in hexadecimal to character
sub hex_to_character {
    my $string = shift;
    $string =~ s/([[:xdigit:]]{2})/chr(hex($1))/eg;
    return $string;
}

sub character_to_hex {
    my $string = shift;
    $string =~ s/(.)/sprintf("%x",ord($1))/eg;
    return $string;
}

# Method convert {aacute} to á
sub mnemonics_to_utf8 {
    my $record         = shift;
    my %mnemonics_utf8 = mnemonics_to_character();
    for my $mnemonic ( keys %mnemonics_utf8 ) {
        my $character = hex_to_character( $mnemonics_utf8{$mnemonic} );
        $record =~ s/\{$mnemonic\}/$character/g;
    }
    return $record;
}

# Method to convert á to {aacute}
sub utf8_to_mnemonics {
    my $record         = shift;
    my %mnemonics_utf8 = character_to_mnemonics();

    # convert $\{} to html number
    $record =~ s/\$/<&#36;>/g;
    $record =~ s/\\/<&#92;>/g;
    $record =~ s/\{/<&#123;>/g;
    $record =~ s/\}/<&#125;>/g;

    # convert the rest of mnemonics
    for my $char_hex_value ( keys %mnemonics_utf8 ) {
        my $mnemonic = $mnemonics_utf8{$char_hex_value};
        my $char     = hex_to_character($char_hex_value);
        $record =~ s/$char/\{$mnemonic\}/g;
    }

    # convert html number to proper mnemonic
    $record =~ s/<&#36;>/\{dollar\}/g;
    $record =~ s/<&#92;>/\{bsol\}/g;
    $record =~ s/<&#123;>/\{lcub\}/g;
    $record =~ s/<&#125;>/\{rcub\}/g;
    return $record;
}

# Method convert incorrect {grave} to á or {deg} to À
sub BadMnemonics_to_RightUTF8 {
    my $record                = shift;
    my %badnemonics_rightutf8 = bad_to_char();
    for my $mnemonic ( keys %badnemonics_rightutf8 ) {
        my $character = hex_to_character( $badnemonics_rightutf8{$mnemonic} );
        $record =~ s/\{$mnemonic\}/$character/g;
    }
    return $record;
}

# method convert incorrect {grave} to {acute} or {deg} => {Agrave}
sub BadMnemonics_to_RightMnemonics {
    my $record                      = shift;
    my %badmnemonics_rightmnemonics = bad_to_right(0);
    for my $mnemonic ( keys %badmnemonics_rightmnemonics ) {
        $record =~
          s/\{$mnemonic\}/\{$badmnemonics_rightmnemonics{$mnemonic}\}/g;
    }

    #{THORN} => € Does not exist mnemonic to this character
    my %badnemonics_rightutf8 = bad_to_right(1);
    for my $mnemonic ( keys %badnemonics_rightutf8 ) {
        my $character = hex_to_character( $badnemonics_rightutf8{$mnemonic} );
        $record =~ s/\{$mnemonic\}/$character/g;
    }

# If combining mnemonics exist
#    my %hash = bad_to_right(2);
#    foreach my $bad_mnemonics (keys %hash) {
#        foreach my $combining (keys %{ $hash{$bad_mnemonics} }) {
#            $record =~ s/\{$bad_mnemonics\}/\{$combining\}\{$hash{$bad_mnemonics}{$combining}\}/g;
#        }
#    }
    return $record;
}

1;

__END__

=head1 AUTHOR

Hector Castro <hector.hecaxmmx@gmail.com>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2017 by Hector Castro.

This is free software, licensed under:

The GNU General Public License, Version 3, June 2007

=cut
